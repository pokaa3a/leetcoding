#include <iostream>
#include <vector>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <string>
#include <queue>
#include <stack>
#include <sstream>
#include <cmath>
#include <numeric>
using namespace std;

struct TreeNode {
	int val;
	TreeNode* left;
	TreeNode* right;
	TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

struct ListNode {
	int val;
	ListNode *next;
	ListNode(int x) : val(x), next(NULL) {}
};

/* Solution */
const int MOD = 1000000007;
class Solution {
public:
    int minMalwareSpread(vector<vector<int> >& graph, vector<int>& initial) {
    	int n = graph.size();
    	int ans = *min_element(initial.begin(), initial.end()), graph_size = INT_MIN;
    	set<int> init_nodes(initial.begin(), initial.end());
    	set<int> visited;

    	for (int i = 0; i < n; ++i) {
    		if (visited.count(i) > 0) continue;
    		set<int> malwares, sub_graph;
    		dfs(i, graph, init_nodes, visited, malwares, sub_graph);

    		if (malwares.size() == 1 && (int)sub_graph.size() > graph_size) {
    			ans = *malwares.begin();
    			graph_size = (int)sub_graph.size();
    		}
    	}
    	return ans;
    }
    // dfs returns size of sub-graph
    void dfs(int node, vector<vector<int> >& graph, set<int>& init_nodes,
    		 set<int>& visited, set<int>& malwares, set<int>& sub_graph) {
    	visited.insert(node);
    	sub_graph.insert(node);
    	if (init_nodes.count(node) > 0) malwares.insert(node);

    	int n = graph.size();
    	for (int i = 0; i < n; ++i) {
    		if (i == node || visited.count(i) > 0) continue;
    		if (graph[i][node] == 1)
    			dfs(i, graph, init_nodes, visited, malwares, sub_graph);
    	}
    }
};

int main() {
	/* Solution */
	Solution sol;

	/* Test cases */

	/* [1-D vector] */
	// const int a = 1;
	// int arr[] = {};
	// vector<int> nums(arr, arr + a);

	/* [2-D vector] */
	const int rows = 4;
	const int cols = 4;
	int arr[rows][cols] = {{1,0,0,0}, {0,1,0,0}, {0,0,1,1}, {0,0,1,1}};
	vector<vector<int> > grid;
	for (int r = 0; r < rows; ++r) {
		grid.push_back(vector<int>(arr[r], arr[r] + cols));
	}
	int init[] = {1, 3};
	vector<int> initials(init, init + 2);

	cout << sol.minMalwareSpread(grid, initials) << endl;

	/* [String] */
	// string str = "";

}